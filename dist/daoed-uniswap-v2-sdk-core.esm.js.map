{"version":3,"file":"daoed-uniswap-v2-sdk-core.esm.js","sources":["../src/env.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/percent.ts","../src/chains.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/sqrt.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts","../src/entities/trade.ts","../src/utils/uniswapV2Library.ts","../src/utils/liquidityMath.ts","../src/utils/lpPositionTracker.ts","../src/router.ts"],"sourcesContent":["// Environment configuration\r\nexport const ENV = {\r\n  NODE_ENV: process.env.NODE_ENV || 'development',\r\n  NETWORK: process.env.NETWORK || 'mainnet',\r\n  FACTORY_ADDRESS: process.env.FACTORY_ADDRESS,\r\n  ROUTER_ADDRESS: process.env.ROUTER_ADDRESS,\r\n  CHAIN_ID: process.env.CHAIN_ID ? parseInt(process.env.CHAIN_ID) : 1,\r\n} as const\r\n\r\nexport type Environment = typeof ENV","import { ENV } from './env'\r\n\r\n// Contract addresses for different networks\r\nexport const FACTORY_ADDRESSES: { [chainId: number]: string } = {\r\n  1: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', // Mainnet\r\n  3: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', // Ropsten (for tests)\r\n  11155111: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f' // Sepolia\r\n}\r\n\r\nexport const ROUTER_ADDRESSES: { [chainId: number]: string } = {\r\n  1: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D', // Mainnet\r\n  3: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D', // Ropsten (for tests)\r\n  11155111: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D' // Sepolia\r\n}\r\n\r\n// Initialize addresses from environment variables if available\r\nif (ENV.FACTORY_ADDRESS && ENV.CHAIN_ID) {\r\n  FACTORY_ADDRESSES[ENV.CHAIN_ID] = ENV.FACTORY_ADDRESS\r\n}\r\n\r\nif (ENV.ROUTER_ADDRESS && ENV.CHAIN_ID) {\r\n  ROUTER_ADDRESSES[ENV.CHAIN_ID] = ENV.ROUTER_ADDRESS\r\n}\r\n\r\n// Helper functions to set addresses dynamically\r\nexport function setFactoryAddress(chainId: number, address: string): void {\r\n  FACTORY_ADDRESSES[chainId] = address\r\n}\r\n\r\nexport function setRouterAddress(chainId: number, address: string): void {\r\n  ROUTER_ADDRESSES[chainId] = address\r\n}\r\n\r\nexport function getFactoryAddress(chainId: number): string | undefined {\r\n  return FACTORY_ADDRESSES[chainId]\r\n}\r\n\r\nexport function getRouterAddress(chainId: number): string | undefined {\r\n  return ROUTER_ADDRESSES[chainId]\r\n}","import { FACTORY_ADDRESSES } from './addresses';\n\nimport JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\n\n\nexport const FACTORY_ADDRESS_MAP: { [chainId: number]: string } = FACTORY_ADDRESSES\n\nexport const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const FIVE = JSBI.BigInt(5)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\nexport const BASIS_POINTS = JSBI.BigInt(10000)\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding, ZERO, ONE } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n\nexport const ZERO_PERCENT = new Percent(ZERO)\nexport const ONE_HUNDRED_PERCENT = new Percent(ONE)\n","export enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3, // For tests\n  SEPOLIA = 11155111,\n  BASE = 8453\n}\n\nexport const SUPPORTED_CHAINS = [ChainId.MAINNET, ChainId.ROPSTEN, ChainId.SEPOLIA, ChainId.BASE] as const\nexport type SupportedChainsType = typeof SUPPORTED_CHAINS[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  ETHER = 'ETH'\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   * Relevant for fee-on-transfer (FOT) token taxes,\n   * Not every ERC20 token is FOT token, so this field is optional\n   */\n  public readonly buyFeeBps?: BigNumber\n  public readonly sellFeeBps?: BigNumber\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean,\n    buyFeeBps?: BigNumber,\n    sellFeeBps?: BigNumber\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n    if (buyFeeBps) {\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    if (sellFeeBps) {\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    this.buyFeeBps = buyFeeBps\n    this.sellFeeBps = sellFeeBps\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\nimport { ChainId } from '../chains'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.SEPOLIA]: new Token(\n    ChainId.SEPOLIA,\n    '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.BASE]: new Token(ChainId.BASE, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { getCreate2Address } from '@ethersproject/address'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { keccak256, pack } from '@ethersproject/solidity'\nimport { BigintIsh } from '../constants'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { sqrt } from '../utils/sqrt'\nimport { Token } from './token'\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport {\n  _1000,\n  _997,\n  BASIS_POINTS,\n  FACTORY_ADDRESS_MAP,\n  FIVE,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ONE,\n  ZERO\n} from '../constants'\nimport { ONE_HUNDRED_PERCENT, ZERO_PERCENT } from './fractions/percent'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH\n  )\n}\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const factoryAddress = FACTORY_ADDRESS_MAP[tokenA.chainId]\n    invariant(factoryAddress, 'FACTORY_ADDRESS')\n    return computePairAddress({ factoryAddress, tokenA, tokenB })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  /**\n   * getAmountOut is the linear algebra of reserve ratio against amountIn:amountOut.\n   * https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000\n   * has the math deduction for the reserve calculation without fee-on-transfer fees.\n   *\n   * With fee-on-transfer tax, intuitively it's just:\n   * inputAmountWithFeeAndTax = 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                          = (1 - amountIn.sellFeesBips / 10000) * amountInWithFee\n   * where amountInWithFee is the amountIn after taking out the LP fees\n   * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000)\n   *\n   * But we are illustrating the math deduction below to ensure that's the case.\n   *\n   * before swap A * B = K where A = reserveIn B = reserveOut\n   *\n   * after swap A' * B' = K where only k is a constant value\n   *\n   * getAmountOut\n   *\n   * A' = A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn # here 0.3% is deducted\n   * B' = B - amountOut * (1 - amountOut.buyFeesBips / 10000)\n   * amountOut = (B - B') / (1 - amountOut.buyFeesBips / 10000) # where A' * B' still is k\n   *           = (B - K/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = (B - AB/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = ((BA + B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn - AB)/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn / (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   * amountOut * (1 - amountOut.buyFeesBips / 10000) = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                                                    /\n   *                                                    (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *\n   * outputAmountWithTax = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                       /\n   *                       (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *                       = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn * 1000\n   *                       /\n   *                       ((A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn) * 1000)\n   *                     = (B * (1 - amountIn.sellFeesBips / 10000) 997 * * amountIn\n   *                       /\n   *                       (1000 * A + (1 - amountIn.sellFeesBips / 10000) * 997 * amountIn)\n   *                     = (B * (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee)\n   *                       /\n   *                       (1000 * A + (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee)\n   *                     = (B * inputAmountWithFeeAndTax)\n   *                       /\n   *                       (1000 * A + inputAmountWithFeeAndTax)\n   *\n   * inputAmountWithFeeAndTax = (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee\n   * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000)\n   *\n   * @param inputAmount\n   * @param calculateFotFees\n   */\n  public getOutputAmount(\n    inputAmount: CurrencyAmount<Token>,\n    calculateFotFees: boolean = true\n  ): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n\n    const percentAfterSellFees = calculateFotFees ? this.derivePercentAfterSellFees(inputAmount) : ZERO_PERCENT\n    const inputAmountAfterTax = percentAfterSellFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          inputAmount.currency,\n          percentAfterSellFees.multiply(inputAmount).quotient // fraction.quotient will round down by itself, which is desired\n        )\n      : inputAmount\n\n    const inputAmountWithFeeAndAfterTax = JSBI.multiply(inputAmountAfterTax.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFeeAndAfterTax, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFeeAndAfterTax)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator) // JSBI.divide will round down by itself, which is desired\n    )\n\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    const percentAfterBuyFees = calculateFotFees ? this.derivePercentAfterBuyFees(outputAmount) : ZERO_PERCENT\n    const outputAmountAfterTax = percentAfterBuyFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          outputAmount.currency,\n          outputAmount.multiply(percentAfterBuyFees).quotient // fraction.quotient will round down by itself, which is desired\n        )\n      : outputAmount\n    if (JSBI.equal(outputAmountAfterTax.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    return [\n      outputAmountAfterTax,\n      new Pair(inputReserve.add(inputAmountAfterTax), outputReserve.subtract(outputAmountAfterTax))\n    ]\n  }\n\n  /**\n   * getAmountIn is the linear algebra of reserve ratio against amountIn:amountOut.\n   * https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000\n   * has the math deduction for the reserve calculation without fee-on-transfer fees.\n   *\n   * With fee-on-transfer fees, intuitively it's just:\n   * outputAmountWithTax = amountOut / (1 - amountOut.buyFeesBips / 10000)\n   * inputAmountWithTax = amountIn / (1 - amountIn.sellFeesBips / 10000) / 0.997\n   *\n   * But we are illustrating the math deduction below to ensure that's the case.\n   *\n   * before swap A * B = K where A = reserveIn B = reserveOut\n   *\n   * after swap A' * B' = K where only k is a constant value\n   *\n   * getAmountIn\n   *\n   * B' = B - amountOut * (1 - amountOut.buyFeesBips / 10000)\n   * A' = A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn # here 0.3% is deducted\n   * amountIn = (A' - A) / (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = (K / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)) - A)\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = (AB / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)) - A)\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((AB - AB + A * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((A * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((A * 1000 * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (997 * (1 - amountIn.sellFeesBips / 10000))\n   *\n   * outputAmountWithTax = amountOut / (1 - amountOut.buyFeesBips / 10000)\n   * inputAmountWithTax = amountIn / (997 * (1 - amountIn.sellFeesBips / 10000))\n   *                    = (A * outputAmountWithTax * 1000) / ((B - outputAmountWithTax) * 997)\n   *\n   * @param outputAmount\n   */\n  public getInputAmount(\n    outputAmount: CurrencyAmount<Token>,\n    calculateFotFees: boolean = true\n  ): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    const percentAfterBuyFees = calculateFotFees ? this.derivePercentAfterBuyFees(outputAmount) : ZERO_PERCENT\n    const outputAmountBeforeTax = percentAfterBuyFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          outputAmount.currency,\n          JSBI.add(outputAmount.divide(percentAfterBuyFees).quotient, ONE) // add 1 for rounding up\n        )\n      : outputAmount\n\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient) ||\n      JSBI.greaterThanOrEqual(outputAmountBeforeTax.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmountBeforeTax.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmountBeforeTax.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE) // add 1 here is part of the formula, no rounding needed here, since there will not be decimal at this point\n    )\n\n    const percentAfterSellFees = calculateFotFees ? this.derivePercentAfterSellFees(inputAmount) : ZERO_PERCENT\n    const inputAmountBeforeTax = percentAfterSellFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          inputAmount.currency,\n          JSBI.add(inputAmount.divide(percentAfterSellFees).quotient, ONE) // add 1 for rounding up\n        )\n      : inputAmount\n    return [inputAmountBeforeTax, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n\n  private derivePercentAfterSellFees(inputAmount: CurrencyAmount<Token>): Percent {\n    const sellFeeBips = this.token0.wrapped.equals(inputAmount.wrapped.currency)\n      ? this.token0.wrapped.sellFeeBps\n      : this.token1.wrapped.sellFeeBps\n    if (sellFeeBips?.gt(BigNumber.from(0))) {\n      return ONE_HUNDRED_PERCENT.subtract(new Percent(JSBI.BigInt(sellFeeBips)).divide(BASIS_POINTS))\n    } else {\n      return ZERO_PERCENT\n    }\n  }\n\n  private derivePercentAfterBuyFees(outputAmount: CurrencyAmount<Token>): Percent {\n    const buyFeeBps = this.token0.wrapped.equals(outputAmount.wrapped.currency)\n      ? this.token0.wrapped.buyFeeBps\n      : this.token1.wrapped.buyFeeBps\n    if (buyFeeBps?.gt(BigNumber.from(0))) {\n      return ONE_HUNDRED_PERCENT.subtract(new Percent(JSBI.BigInt(buyFeeBps)).divide(BASIS_POINTS))\n    } else {\n      return ZERO_PERCENT\n    }\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Price } from './fractions/price'\nimport { Token } from './token'\n\nimport { Pair } from './pair'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import { Currency } from '../entities/currency'\nimport { CurrencyAmount } from '../entities/fractions/currencyAmount'\nimport { Percent } from '../entities/fractions/percent'\nimport { Price } from '../entities/fractions/price'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import { computePriceImpact } from '../utils/computePriceImpact'\nimport { Token } from './token'\nimport { Currency } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { sortedInsert } from '../utils/sortedInsert'\nimport { TradeType, ONE, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\n/**\n * Returns sorted token addresses, used to handle return values from pairs sorted in this order\n */\nexport function sortTokens(tokenA: string, tokenB: string): [string, string] {\n  invariant(tokenA !== tokenB, 'IDENTICAL_ADDRESSES')\n  const [token0, token1] = tokenA.toLowerCase() < tokenB.toLowerCase() ? [tokenA, tokenB] : [tokenB, tokenA]\n  invariant(token0.toLowerCase() !== '0x0000000000000000000000000000000000000000', 'ZERO_ADDRESS')\n  return [token0, token1]\n}\n\n/**\n * Calculates the CREATE2 address for a pair without making any external calls\n * Note: This is a simplified version for demonstration purposes\n */\nexport function pairFor(factory: string, tokenA: string, tokenB: string, initCodeHash: string): string {\n  const [token0, token1] = sortTokens(tokenA, tokenB)\n\n  // In a real implementation, this would calculate the CREATE2 address\n  // For now, return a mock address that's deterministic based on inputs\n  const combined = factory + token0 + token1 + initCodeHash\n  const mockAddress = '0x' + combined.slice(-40).padStart(40, '0')\n\n  return mockAddress\n}\n\n/**\n * Given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n */\nexport function quote(amountA: JSBI, reserveA: JSBI, reserveB: JSBI): JSBI {\n  invariant(JSBI.greaterThan(amountA, JSBI.BigInt(0)), 'INSUFFICIENT_AMOUNT')\n  invariant(\n    JSBI.greaterThan(reserveA, JSBI.BigInt(0)) && JSBI.greaterThan(reserveB, JSBI.BigInt(0)),\n    'INSUFFICIENT_LIQUIDITY'\n  )\n  return JSBI.divide(JSBI.multiply(amountA, reserveB), reserveA)\n}\n\n/**\n * Given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n */\nexport function getAmountOut(amountIn: JSBI, reserveIn: JSBI, reserveOut: JSBI): JSBI {\n  invariant(JSBI.greaterThan(amountIn, JSBI.BigInt(0)), 'INSUFFICIENT_INPUT_AMOUNT')\n  invariant(\n    JSBI.greaterThan(reserveIn, JSBI.BigInt(0)) && JSBI.greaterThan(reserveOut, JSBI.BigInt(0)),\n    'INSUFFICIENT_LIQUIDITY'\n  )\n\n  const amountInWithFee = JSBI.multiply(amountIn, JSBI.BigInt(997))\n  const numerator = JSBI.multiply(amountInWithFee, reserveOut)\n  const denominator = JSBI.add(JSBI.multiply(reserveIn, JSBI.BigInt(1000)), amountInWithFee)\n  return JSBI.divide(numerator, denominator)\n}\n\n/**\n * Given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n */\nexport function getAmountIn(amountOut: JSBI, reserveIn: JSBI, reserveOut: JSBI): JSBI {\n  invariant(JSBI.greaterThan(amountOut, JSBI.BigInt(0)), 'INSUFFICIENT_OUTPUT_AMOUNT')\n  invariant(\n    JSBI.greaterThan(reserveIn, JSBI.BigInt(0)) && JSBI.greaterThan(reserveOut, JSBI.BigInt(0)),\n    'INSUFFICIENT_LIQUIDITY'\n  )\n\n  const numerator = JSBI.multiply(JSBI.multiply(reserveIn, amountOut), JSBI.BigInt(1000))\n  const denominator = JSBI.multiply(JSBI.subtract(reserveOut, amountOut), JSBI.BigInt(997))\n  return JSBI.add(JSBI.divide(numerator, denominator), JSBI.BigInt(1))\n}\n\n/**\n * Performs chained getAmountOut calculations on any number of pairs\n */\nexport function getAmountsOut(amountIn: JSBI, reserves: Array<[JSBI, JSBI]>): JSBI[] {\n  invariant(reserves.length >= 1, 'INVALID_PATH')\n  const amounts: JSBI[] = new Array(reserves.length + 1)\n  amounts[0] = amountIn\n  for (let i = 0; i < reserves.length; i++) {\n    amounts[i + 1] = getAmountOut(amounts[i], reserves[i][0], reserves[i][1])\n  }\n  return amounts\n}\n\n/**\n * Performs chained getAmountIn calculations on any number of pairs\n */\nexport function getAmountsIn(amountOut: JSBI, reserves: Array<[JSBI, JSBI]>): JSBI[] {\n  invariant(reserves.length >= 1, 'INVALID_PATH')\n  const amounts: JSBI[] = new Array(reserves.length + 1)\n  amounts[amounts.length - 1] = amountOut\n  for (let i = reserves.length - 1; i >= 0; i--) {\n    amounts[i] = getAmountIn(amounts[i + 1], reserves[i][0], reserves[i][1])\n  }\n  return amounts\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { sqrt } from './sqrt'\nimport { getAmountOut } from './uniswapV2Library'\n\n/**\n * Computes the direction and magnitude of the profit-maximizing trade\n * @param truePriceTokenA The true price of token A\n * @param truePriceTokenB The true price of token B\n * @param reserveA Reserve of token A\n * @param reserveB Reserve of token B\n * @returns [aToB: boolean, amountIn: JSBI] - direction and amount for profit-maximizing trade\n */\nexport function computeProfitMaximizingTrade(\n  truePriceTokenA: JSBI,\n  truePriceTokenB: JSBI,\n  reserveA: JSBI,\n  reserveB: JSBI\n): [boolean, JSBI] {\n  invariant(\n    JSBI.greaterThan(truePriceTokenA, JSBI.BigInt(0)) && JSBI.greaterThan(truePriceTokenB, JSBI.BigInt(0)),\n    'INVALID_PRICES'\n  )\n  invariant(\n    JSBI.greaterThan(reserveA, JSBI.BigInt(0)) && JSBI.greaterThan(reserveB, JSBI.BigInt(0)),\n    'INSUFFICIENT_RESERVES'\n  )\n\n  // Current price in pool: reserveB / reserveA\n  // True price ratio: truePriceTokenB / truePriceTokenA\n  // If current price < true price, A is undervalued, sell B to buy A (aToB = false)\n  // If current price > true price, A is overvalued, sell A to buy B (aToB = true)\n\n  const currentPrice = JSBI.divide(JSBI.multiply(reserveB, truePriceTokenA), reserveA)\n  const aToB = JSBI.greaterThan(currentPrice, truePriceTokenB)\n\n  if (JSBI.equal(currentPrice, truePriceTokenB)) {\n    return [false, JSBI.BigInt(0)]\n  }\n\n  const invariantValue = JSBI.multiply(reserveA, reserveB)\n\n  try {\n    const leftSide = sqrt(\n      JSBI.divide(\n        JSBI.multiply(JSBI.multiply(invariantValue, JSBI.BigInt(1000)), aToB ? truePriceTokenA : truePriceTokenB),\n        JSBI.multiply(aToB ? truePriceTokenB : truePriceTokenA, JSBI.BigInt(997))\n      )\n    )\n\n    const rightSide = JSBI.divide(JSBI.multiply(aToB ? reserveA : reserveB, JSBI.BigInt(1000)), JSBI.BigInt(997))\n\n    if (JSBI.lessThan(leftSide, rightSide)) {\n      return [false, JSBI.BigInt(0)]\n    }\n\n    const amountIn = JSBI.subtract(leftSide, rightSide)\n    return [aToB, amountIn]\n  } catch (error) {\n    return [false, JSBI.BigInt(0)]\n  }\n}\n\n/**\n * Gets the reserves after an arbitrage moves the price to the profit-maximizing ratio\n * @param reserveA Initial reserve of token A\n * @param reserveB Initial reserve of token B\n * @param truePriceTokenA The true price of token A\n * @param truePriceTokenB The true price of token B\n * @returns [reserveA: JSBI, reserveB: JSBI] - reserves after arbitrage\n */\nexport function getReservesAfterArbitrage(\n  reserveA: JSBI,\n  reserveB: JSBI,\n  truePriceTokenA: JSBI,\n  truePriceTokenB: JSBI\n): [JSBI, JSBI] {\n  invariant(\n    JSBI.greaterThan(reserveA, JSBI.BigInt(0)) && JSBI.greaterThan(reserveB, JSBI.BigInt(0)),\n    'ZERO_PAIR_RESERVES'\n  )\n\n  const [aToB, amountIn] = computeProfitMaximizingTrade(truePriceTokenA, truePriceTokenB, reserveA, reserveB)\n\n  if (JSBI.equal(amountIn, JSBI.BigInt(0))) {\n    return [reserveA, reserveB]\n  }\n\n  if (aToB) {\n    const amountOut = getAmountOut(amountIn, reserveA, reserveB)\n    return [JSBI.add(reserveA, amountIn), JSBI.subtract(reserveB, amountOut)]\n  } else {\n    const amountOut = getAmountOut(amountIn, reserveB, reserveA)\n    return [JSBI.subtract(reserveA, amountOut), JSBI.add(reserveB, amountIn)]\n  }\n}\n\n/**\n * Computes liquidity value given all the parameters of the pair\n * @param reservesA Reserve of token A\n * @param reservesB Reserve of token B\n * @param totalSupply Total supply of liquidity tokens\n * @param liquidityAmount Amount of liquidity tokens\n * @param feeOn Whether protocol fee is on\n * @param kLast Last invariant value (for fee calculation)\n * @returns [tokenAAmount: JSBI, tokenBAmount: JSBI] - amounts of token A and B\n */\nexport function computeLiquidityValue(\n  reservesA: JSBI,\n  reservesB: JSBI,\n  totalSupply: JSBI,\n  liquidityAmount: JSBI,\n  feeOn: boolean,\n  kLast: JSBI\n): [JSBI, JSBI] {\n  let adjustedTotalSupply = totalSupply\n\n  if (feeOn && JSBI.greaterThan(kLast, JSBI.BigInt(0))) {\n    const rootK = sqrt(JSBI.multiply(reservesA, reservesB))\n    const rootKLast = sqrt(kLast)\n\n    if (JSBI.greaterThan(rootK, rootKLast)) {\n      const numerator1 = totalSupply\n      const numerator2 = JSBI.subtract(rootK, rootKLast)\n      const denominator = JSBI.add(JSBI.multiply(rootK, JSBI.BigInt(5)), rootKLast)\n      const feeLiquidity = JSBI.divide(JSBI.multiply(numerator1, numerator2), denominator)\n      adjustedTotalSupply = JSBI.add(totalSupply, feeLiquidity)\n    }\n  }\n\n  return [\n    JSBI.divide(JSBI.multiply(reservesA, liquidityAmount), adjustedTotalSupply),\n    JSBI.divide(JSBI.multiply(reservesB, liquidityAmount), adjustedTotalSupply)\n  ]\n}\n\n/**\n * Interface for pair information needed for liquidity calculations\n */\nexport interface PairReserves {\n  reserveA: JSBI\n  reserveB: JSBI\n  totalSupply: JSBI\n  kLast: JSBI\n  feeOn: boolean\n}\n\n/**\n * Computes the value of liquidity tokens in terms of underlying tokens\n * @param pairReserves Current reserves and metadata for the pair\n * @param liquidityAmount Amount of liquidity tokens to value\n * @returns [tokenAAmount: JSBI, tokenBAmount: JSBI] - underlying token amounts\n */\nexport function getLiquidityValue(pairReserves: PairReserves, liquidityAmount: JSBI): [JSBI, JSBI] {\n  return computeLiquidityValue(\n    pairReserves.reserveA,\n    pairReserves.reserveB,\n    pairReserves.totalSupply,\n    liquidityAmount,\n    pairReserves.feeOn,\n    pairReserves.kLast\n  )\n}\n\n/**\n * Computes the value of liquidity tokens after arbitrage to true price\n * @param pairReserves Current reserves and metadata for the pair\n * @param truePriceTokenA The true price of token A\n * @param truePriceTokenB The true price of token B\n * @param liquidityAmount Amount of liquidity tokens to value\n * @returns [tokenAAmount: JSBI, tokenBAmount: JSBI] - underlying token amounts after arbitrage\n */\nexport function getLiquidityValueAfterArbitrageToPrice(\n  pairReserves: PairReserves,\n  truePriceTokenA: JSBI,\n  truePriceTokenB: JSBI,\n  liquidityAmount: JSBI\n): [JSBI, JSBI] {\n  invariant(\n    JSBI.greaterThanOrEqual(pairReserves.totalSupply, liquidityAmount) &&\n      JSBI.greaterThan(liquidityAmount, JSBI.BigInt(0)),\n    'INVALID_LIQUIDITY_AMOUNT'\n  )\n\n  const [reservesA, reservesB] = getReservesAfterArbitrage(\n    pairReserves.reserveA,\n    pairReserves.reserveB,\n    truePriceTokenA,\n    truePriceTokenB\n  )\n\n  return computeLiquidityValue(\n    reservesA,\n    reservesB,\n    pairReserves.totalSupply,\n    liquidityAmount,\n    pairReserves.feeOn,\n    pairReserves.kLast\n  )\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { checkValidAddress } from './validateAndParseAddress'\n\n/**\n * Represents an LP Position with detailed information\n */\nexport interface LPPosition {\n  pool: string // Pool contract address\n  tokenA: string // First token address\n  tokenB: string // Second token address\n  balance: JSBI // LP token balance\n  reserveA: JSBI // Token A reserves in pool\n  reserveB: JSBI // Token B reserves in pool\n  totalSupply: JSBI // Total LP token supply\n  sharePercentage: JSBI // User's share of the pool (in basis points, 10000 = 100%)\n}\n\n/**\n * Paginated result for LP pools\n */\nexport interface LPPoolsResult {\n  pools: string[]\n  hasMore: boolean\n}\n\n/**\n * Paginated result for LP positions\n */\nexport interface LPPositionsResult {\n  positions: LPPosition[]\n  hasMore: boolean\n}\n\n/**\n * Interface for LP position data provider\n * This would typically be implemented by a class that interacts with blockchain data\n */\nexport interface LPDataProvider {\n  getUserLPPoolCount(user: string): Promise<JSBI>\n  getUserLPPools(user: string, offset: JSBI, limit: JSBI): Promise<LPPoolsResult>\n  getUserLPBalance(user: string, pool: string): Promise<JSBI>\n  getUserLPPositions(user: string, offset: JSBI, limit: JSBI): Promise<LPPositionsResult>\n  hasLPPosition(user: string, pool: string): Promise<boolean>\n  getPoolInfo(\n    pool: string\n  ): Promise<{\n    tokenA: string\n    tokenB: string\n    reserveA: JSBI\n    reserveB: JSBI\n    totalSupply: JSBI\n  }>\n}\n\n/**\n * Mock implementation of LP data provider for testing and demonstration\n */\nexport class MockLPDataProvider implements LPDataProvider {\n  private userPools: Map<string, Set<string>> = new Map()\n  private userBalances: Map<string, Map<string, JSBI>> = new Map()\n  private poolData: Map<\n    string,\n    {\n      tokenA: string\n      tokenB: string\n      reserveA: JSBI\n      reserveB: JSBI\n      totalSupply: JSBI\n    }\n  > = new Map()\n\n  /**\n   * Add mock data for testing\n   */\n  addMockUserPosition(user: string, pool: string, balance: JSBI) {\n    user = checkValidAddress(user)\n    pool = checkValidAddress(pool)\n\n    if (!this.userPools.has(user)) {\n      this.userPools.set(user, new Set())\n    }\n    this.userPools.get(user)!.add(pool)\n\n    if (!this.userBalances.has(user)) {\n      this.userBalances.set(user, new Map())\n    }\n    this.userBalances.get(user)!.set(pool, balance)\n  }\n\n  /**\n   * Add mock pool data\n   */\n  addMockPoolData(pool: string, tokenA: string, tokenB: string, reserveA: JSBI, reserveB: JSBI, totalSupply: JSBI) {\n    this.poolData.set(checkValidAddress(pool), {\n      tokenA: checkValidAddress(tokenA),\n      tokenB: checkValidAddress(tokenB),\n      reserveA,\n      reserveB,\n      totalSupply\n    })\n  }\n\n  async getUserLPPoolCount(user: string): Promise<JSBI> {\n    user = checkValidAddress(user)\n    const pools = this.userPools.get(user)\n    return JSBI.BigInt(pools ? pools.size : 0)\n  }\n\n  async getUserLPPools(user: string, offset: JSBI, limit: JSBI): Promise<LPPoolsResult> {\n    user = checkValidAddress(user)\n    const pools = this.userPools.get(user)\n\n    if (!pools) {\n      return { pools: [], hasMore: false }\n    }\n\n    const poolArray = Array.from(pools)\n    const offsetNum = JSBI.toNumber(offset)\n    const limitNum = JSBI.toNumber(limit)\n\n    const sliced = poolArray.slice(offsetNum, offsetNum + limitNum)\n    const hasMore = offsetNum + limitNum < poolArray.length\n\n    return {\n      pools: sliced,\n      hasMore\n    }\n  }\n\n  async getUserLPBalance(user: string, pool: string): Promise<JSBI> {\n    user = checkValidAddress(user)\n    pool = checkValidAddress(pool)\n\n    const userBalances = this.userBalances.get(user)\n    if (!userBalances) {\n      return JSBI.BigInt(0)\n    }\n\n    return userBalances.get(pool) || JSBI.BigInt(0)\n  }\n\n  async getUserLPPositions(user: string, offset: JSBI, limit: JSBI): Promise<LPPositionsResult> {\n    user = checkValidAddress(user)\n    const poolsResult = await this.getUserLPPools(user, offset, limit)\n\n    const positions: LPPosition[] = []\n\n    for (const pool of poolsResult.pools) {\n      const balance = await this.getUserLPBalance(user, pool)\n      const poolInfo = await this.getPoolInfo(pool)\n\n      // Calculate share percentage (balance / totalSupply * 10000)\n      const sharePercentage = JSBI.equal(poolInfo.totalSupply, JSBI.BigInt(0))\n        ? JSBI.BigInt(0)\n        : JSBI.divide(JSBI.multiply(balance, JSBI.BigInt(10000)), poolInfo.totalSupply)\n\n      positions.push({\n        pool,\n        tokenA: poolInfo.tokenA,\n        tokenB: poolInfo.tokenB,\n        balance,\n        reserveA: poolInfo.reserveA,\n        reserveB: poolInfo.reserveB,\n        totalSupply: poolInfo.totalSupply,\n        sharePercentage\n      })\n    }\n\n    return {\n      positions,\n      hasMore: poolsResult.hasMore\n    }\n  }\n\n  async hasLPPosition(user: string, pool: string): Promise<boolean> {\n    const balance = await this.getUserLPBalance(user, pool)\n    return JSBI.greaterThan(balance, JSBI.BigInt(0))\n  }\n\n  async getPoolInfo(\n    pool: string\n  ): Promise<{\n    tokenA: string\n    tokenB: string\n    reserveA: JSBI\n    reserveB: JSBI\n    totalSupply: JSBI\n  }> {\n    pool = checkValidAddress(pool)\n    const info = this.poolData.get(pool)\n\n    if (!info) {\n      throw new Error(`Pool data not found for ${pool}`)\n    }\n\n    return info\n  }\n}\n\n/**\n * LP Position Tracker class that provides high-level functions\n */\nexport class LPPositionTracker {\n  constructor(private dataProvider: LPDataProvider) {}\n\n  /**\n   * Get the number of LP pools a user has positions in\n   */\n  async getUserLPPoolCount(user: string): Promise<JSBI> {\n    return this.dataProvider.getUserLPPoolCount(user)\n  }\n\n  /**\n   * Get paginated list of LP pools where user has positions\n   */\n  async getUserLPPools(user: string, offset: JSBI, limit: JSBI): Promise<LPPoolsResult> {\n    invariant(JSBI.greaterThanOrEqual(offset, JSBI.BigInt(0)), 'INVALID_OFFSET')\n    invariant(JSBI.greaterThan(limit, JSBI.BigInt(0)), 'INVALID_LIMIT')\n\n    return this.dataProvider.getUserLPPools(user, offset, limit)\n  }\n\n  /**\n   * Get user's LP token balance in a specific pool\n   */\n  async getUserLPBalance(user: string, pool: string): Promise<JSBI> {\n    return this.dataProvider.getUserLPBalance(user, pool)\n  }\n\n  /**\n   * Get paginated list of user's LP positions with detailed information\n   */\n  async getUserLPPositions(user: string, offset: JSBI, limit: JSBI): Promise<LPPositionsResult> {\n    invariant(JSBI.greaterThanOrEqual(offset, JSBI.BigInt(0)), 'INVALID_OFFSET')\n    invariant(JSBI.greaterThan(limit, JSBI.BigInt(0)), 'INVALID_LIMIT')\n\n    return this.dataProvider.getUserLPPositions(user, offset, limit)\n  }\n\n  /**\n   * Check if user has any LP position in a specific pool\n   */\n  async hasLPPosition(user: string, pool: string): Promise<boolean> {\n    return this.dataProvider.hasLPPosition(user, pool)\n  }\n\n  /**\n   * Get all user's LP positions (no pagination)\n   */\n  async getAllUserLPPositions(user: string): Promise<LPPosition[]> {\n    const positions: LPPosition[] = []\n    let offset = JSBI.BigInt(0)\n    const limit = JSBI.BigInt(50) // Reasonable batch size\n\n    while (true) {\n      const result = await this.getUserLPPositions(user, offset, limit)\n      positions.push(...result.positions)\n\n      if (!result.hasMore) {\n        break\n      }\n\n      offset = JSBI.add(offset, limit)\n    }\n\n    return positions\n  }\n\n  /**\n   * Get total value locked (TVL) by user across all positions\n   */\n  async getUserTotalLPValue(\n    user: string\n  ): Promise<{\n    totalPositions: number\n    totalPools: number\n  }> {\n    const positions = await this.getAllUserLPPositions(user)\n    const pools = new Set(positions.map(p => p.pool))\n\n    return {\n      totalPositions: positions.length,\n      totalPools: pools.size\n    }\n  }\n}\n","import { Token } from './entities/token'\nimport { Currency } from './entities/currency'\nimport { CurrencyAmount } from './entities/fractions/currencyAmount'\nimport { Percent } from './entities/fractions/percent'\nimport { TradeType } from './constants'\nimport { validateAndParseAddress } from './utils/validateAndParseAddress'\nimport { Trade } from './entities'\nimport invariant from 'tiny-invariant'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n"],"names":["ENV","NODE_ENV","process","env","NETWORK","FACTORY_ADDRESS","ROUTER_ADDRESS","CHAIN_ID","parseInt","FACTORY_ADDRESSES","ROUTER_ADDRESSES","setFactoryAddress","chainId","address","setRouterAddress","getFactoryAddress","getRouterAddress","TradeType","Rounding","MaxUint256","JSBI","BigInt","FACTORY_ADDRESS_MAP","INIT_CODE_HASH","MINIMUM_LIQUIDITY","ZERO","ONE","FIVE","_997","_1000","BASIS_POINTS","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","_proto","prototype","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","ONE_HUNDRED","toPercent","fraction","Percent","_Fraction","_this","_inheritsLoose","call","ZERO_PERCENT","ONE_HUNDRED_PERCENT","ChainId","SUPPORTED_CHAINS","MAINNET","ROPSTEN","SEPOLIA","BASE","NativeCurrencyName","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","Price","baseCurrency","quoteCurrency","_len","arguments","length","args","Array","_key","result","quoteAmount","baseAmount","_ref","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","_BaseCurrency","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","checkValidAddress","test","Token","bypassChecksum","buyFeeBps","sellFeeBps","gte","BigNumber","from","toLowerCase","sortsBefore","WETH9","_WETH","Ether","_NativeCurrency","onChain","_this$_etherCache$cha","_etherCache","isNative","weth9","MAX_SAFE_INTEGER","TWO","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","constructor","setPrototypeOf","_wrapNativeSuper","InsufficientInputAmountError","_Error2","_this2","computePairAddress","factoryAddress","tokenA","tokenB","_ref2","token0","token1","getCreate2Address","keccak256","pack","Pair","currencyAmountA","tokenAmountB","tokenAmounts","liquidityToken","involvesToken","token","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","calculateFotFees","inputReserve","outputReserve","percentAfterSellFees","derivePercentAfterSellFees","inputAmountAfterTax","inputAmountWithFeeAndAfterTax","outputAmount","percentAfterBuyFees","derivePercentAfterBuyFees","outputAmountAfterTax","getInputAmount","outputAmountBeforeTax","inputAmountBeforeTax","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","sellFeeBips","gt","Route","pairs","input","output","every","pair","wrappedInput","path","_iterator","_createForOfIteratorHelperLoose","entries","_step","done","_step$value","i","currentInput","push","_midPrice","prices","_iterator2","_step2","_step2$value","reduced","slice","reduce","accumulator","currentValue","computePriceImpact","midPrice","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","isFull","lo","hi","mid","splice","pop","inputOutputComparator","a","b","tradeComparator","ioComp","route","Trade","amount","tradeType","EXACT_INPUT","_pair$getOutputAmount","_pair$getInputAmount","executionPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","nextAmountIn","bestTrades","_ref$maxNumResults","maxNumResults","_ref$maxHops","maxHops","tokenOut","_pair$getOutputAmount2","isInsufficientInputAmountError","concat","pairsExcludingThisPair","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","nextAmountOut","_ref2$maxNumResults","_ref2$maxHops","tokenIn","_pair$getInputAmount2","isInsufficientReservesError","sortTokens","pairFor","factory","initCodeHash","_sortTokens","combined","mockAddress","padStart","amountA","reserveA","reserveB","getAmountOut","reserveIn","reserveOut","amountInWithFee","getAmountIn","getAmountsOut","reserves","amounts","getAmountsIn","computeProfitMaximizingTrade","truePriceTokenA","truePriceTokenB","currentPrice","aToB","invariantValue","leftSide","rightSide","getReservesAfterArbitrage","_computeProfitMaximiz","computeLiquidityValue","reservesA","reservesB","liquidityAmount","adjustedTotalSupply","numerator1","numerator2","pairReserves","getLiquidityValueAfterArbitrageToPrice","_getReservesAfterArbi","MockLPDataProvider","Map","addMockUserPosition","user","pool","balance","userPools","has","Set","userBalances","addMockPoolData","poolData","getUserLPPoolCount","_getUserLPPoolCount","_asyncToGenerator","_regenerator","m","_callee","pools","w","_context","n","size","_x","apply","getUserLPPools","_getUserLPPools","_callee2","offset","limit","poolArray","offsetNum","limitNum","sliced","hasMore","_context2","_x2","_x3","_x4","getUserLPBalance","_getUserLPBalance","_callee3","_context3","_x5","_x6","getUserLPPositions","_getUserLPPositions","_callee4","poolsResult","positions","poolInfo","sharePercentage","_context4","v","getPoolInfo","_x7","_x8","_x9","hasLPPosition","_hasLPPosition","_callee5","_context5","_x0","_x1","_getPoolInfo","_callee6","info","_context6","_x10","LPPositionTracker","dataProvider","_proto2","_getUserLPPoolCount2","_callee7","_context7","_x11","_getUserLPPools2","_callee8","_context8","_x12","_x13","_x14","_getUserLPBalance2","_callee9","_context9","_x15","_x16","_getUserLPPositions2","_callee0","_context0","_x17","_x18","_x19","_hasLPPosition2","_callee1","_context1","_x20","_x21","getAllUserLPPositions","_getAllUserLPPositions","_callee10","_context10","_x22","getUserTotalLPValue","_getUserTotalLPValue","_callee11","_context11","map","p","totalPositions","totalPools","_x23","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","deadline","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName"],"mappings":"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"}